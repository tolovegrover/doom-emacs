#+TITLE: Doom Config
#+DATE:    March 18, 2022
#+SINCE:   <replace with next tagged release version>
#+STARTUP: inlineimages nofold

* Table of Contents :TOC_3:noexport:
- [[#description][Description]]
  - [[#maintainers][Maintainers]]
- [[#configel][config.el]]
  - [[#setting-up-user-name][setting up user-name]]
  - [[#fonts][fonts]]
  - [[#theme][theme]]
  - [[#add-more-packages][add more packages]]
    - [[#org-mode-setting][org mode setting]]
    - [[#magit-settings][magit settings]]
- [[#packagesel][packages.el]]

* Description
# A summary of what this module does.
This contains all doom config files which can create 3 files.

** Maintainers
+ @lovegrover (Author)

* config.el
:PROPERTIES:
:header-args: :tangle config.el
:END:

-  Remember, you do not need to run 'doom sync' after modifying this file!

-  Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets. It is optional.

** setting up user-name
#+begin_src elisp
(setq user-full-name "Love Grover"
      user-mail-address "tolovegrover@gmail.com")
#+end_src

** fonts

Doom exposes five (optional) variables for controlling fonts in Doom:

- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- `doom-unicode-font' -- for unicode glyphs
- `doom-serif-font' -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they
accept.

If you or Emacs can't find your font, use 'M-x describe-font' to look them up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to refresh your font settings. If Emacs still can't find your font, it likely wasn't installed correctly. Font issues are rarely Doom issues!

#+begin_src elisp
(setq doom-font (font-spec :family "Love" :size 20))
(setq doom-variable-pitch-font (font-spec :family "Love" :size 20))
#+end_src

** theme

There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme' function. This is the default:

#+begin_src elisp
(setq doom-theme 'doom-one)
(setq display-line-numbers-type t)
#+end_src
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!

** add more packages


Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

  (after! PACKAGE
    (setq x y))

The exceptions to this rule:

  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.

*** org mode setting

#+begin_src elisp
(setq org-directory "~/Documents/org/org/")

(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam
    :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

(setq org-roam-graph-executable "dot")
#+end_src

*** magit settings

#+begin_src elisp
(use-package! magit
  :ensure t)
#+end_src

* packages.el
:PROPERTIES:
:header-args: :tangle packages.el
:END:


change need: doom sync and reload

example
(package! some-package)

To install a package directly from a remote git repo, you must specify a `:recipe'. You'll find documentation on what `:recipe' accepts here: https://github.com/raxod502/straight.el#the-recipe-format
package! another-package
:recipe (:host github :repo "username/repo"))

If the package you are trying to install does not contain a PACKAGENAME.el
file, or is located in a subdirectory of the repo, you'll need to specify
`:files' in the `:recipe':
package! this-package
:recipe (:host github :repo "username/repo"
:files ("some-file.el" "src/lisp/*.el")))

If you'd like to disable a package included with Doom, you can do so here
with the `:disable' property:
package! builtin-package :disable t)

You can override the recipe of a built in package without having to specify
all the properties for `:recipe'. These will inherit the rest of its recipe
from Doom or MELPA/ELPA/Emacsmirror:
package! builtin-package :recipe (:nonrecursive t))
package! builtin-package-2 :recipe (:repo "myfork/package"))

Specify a `:branch' to install a package from a particular branch or tag.
This is required for some packages whose default branch isn't 'master' (which
our package manager can't deal with; see raxod502/straight.el#279)
package! builtin-package :recipe (:branch "develop"))

Use `:pin' to specify a particular commit to install.
package! builtin-package :pin "1a2b3c4d5e")


Doom's packages are pinned to a specific commit and updated from release to
release. The `unpin!' macro allows you to unpin single packages...
unpin! pinned-package)
...or multiple packages
unpin! pinned-package another-pinned-package)
...Or *all* packages (NOT RECOMMENDED; will likely break things)
(unpin! t)

#+begin_src elisp
(unpin! org-roam)
(package! org-roam-ui)
#+end_src

