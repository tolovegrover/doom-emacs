#+TITLE: Doom Config
#+OPTIONS: \n:t
#+DATE:    March 18, 2022
#+SINCE:   <replace with next tagged release version>
#+STARTUP: inlineimages nofold

* Table of Contents :TOC_3:noexport:
- [[#description][Description]]
  - [[#maintainers][Maintainers]]
- [[#configel][config.el]]
  - [[#setting-up-user-name][setting up user-name]]
  - [[#fonts][fonts]]
  - [[#theme][theme]]
  - [[#add-more-packages][add more packages]]
    - [[#org-mode-setting][org mode setting]]
    - [[#magit-settings][magit settings]]
    - [[#email-setup][email setup]]
    - [[#inline-images][inline images]]
- [[#packagesel][packages.el]]
- [[#initel][init.el]]
  - [[#input-and-completion][input and completion]]
  - [[#ui][ui]]
  - [[#editor][editor]]
  - [[#emacs-and-term][emacs and term]]
  - [[#checkers][checkers]]
  - [[#tools][tools]]
  - [[#os-and-lang][os and lang]]
  - [[#email-app-and-config][email, app and config]]

* Description
# A summary of what this module does.
This contains all doom config files which can create 3 files.

** Maintainers
+ @tolovegrover (Author)

* config.el
:PROPERTIES:
:header-args: :tangle config.el
:END:

-  Remember, you do not need to run 'doom sync' after modifying this file!

-  Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets. It is optional.

** setting up user-name
#+begin_src elisp
(setq user-full-name "Love Grover"
      user-mail-address "tolovegrover@gmail.com")
#+end_src

** fonts

Doom exposes five (optional) variables for controlling fonts in Doom:

- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- `doom-unicode-font' -- for unicode glyphs
- `doom-serif-font' -- for the `fixed-pitch-serif' face

See 'C-h v doom-font' for documentation and more examples of what they
accept.

If you or Emacs can't find your font, use 'M-x describe-font' to look them up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to refresh your font settings. If Emacs still can't find your font, it likely wasn't installed correctly. Font issues are rarely Doom issues!

#+begin_src elisp
(setq doom-font (font-spec :family "Love" :size 20))
(setq doom-variable-pitch-font (font-spec :family "Love" :size 20))
#+end_src

** theme

There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme' function. This is the default:

#+begin_src elisp
(setq doom-theme 'doom-one)
(setq display-line-numbers-type t)
#+end_src
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!

** add more packages


Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

(after! PACKAGE
(setq x y))

The exceptions to this rule:

- Setting file/directory variables (like `org-directory')
- Setting variables which explicitly tell you to set them before their
  package is loaded (see 'C-h v VARIABLE' to look up their documentation).
- Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.

*** org mode setting

#+begin_src elisp
(setq org-directory "~/Documents/org/org/")

(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam
  :hook (after-init . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))

(setq org-roam-graph-executable "dot")
#+end_src

*** magit settings

#+begin_src elisp
(use-package! magit)
;;(use-package! emacs-everywhere)
#+end_src

*** email setup
#+begin_src elisp
(set-email-account!                                                                   "gmail"
 '((user-full-name         . "Love Grover")
   (mu4e-sent-folder       . "/[Gmail]/Sent Mail")
   (mu4e-trash-folder      . "/[Gmail]/Bin")
   (smtpmail-smtp-user     . "ph17047@iisermohali.ac.in")
   (user-mail-address      . "ph17047@iisermohali.ac.in")
   ;;(smtpmail-smtp-user     . "")
   (smtpmail-local-domain  . "gmail.com")
   (smtpmail-default-smtp-server . "smtp.gmail.com")
   (smtpmail-smtp-server . "smtp.gmail.com")
   (smtpmail-smtp-service . 587))
 t)

(setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
      org-msg-startup "hidestars indent inlineimages"
      +org-msg-accent-color "#A020F0"
      org-msg-greeting-fmt "\nश्रीमन्%s,\n\n"
      org-msg-signature "\n\n#+begin_signature\nशुभम् भवतु, \\\\\nलव ग्रोवर, \\\\\nपीएचडी-भौतिकशास्त्रम् \\\\\nभारतीय विज्ञान शिक्षा और अनुसन्धान संस्थान- मोहाली, पञ्जाब, भारत\n#+end_signature")
#+end_src

*** inline images
#+begin_src elisp
(setq org-startup-with-inline-images t)
#+end_src
* packages.el
:PROPERTIES:
:header-args: :tangle packages.el
:END:


change need: doom sync and reload

example
(package! some-package)

To install a package directly from a remote git repo, you must specify a `:recipe'. You'll find documentation on what `:recipe' accepts here: https://github.com/raxod502/straight.el#the-recipe-format
package! another-package
:recipe (:host github :repo "username/repo"))

If the package you are trying to install does not contain a PACKAGENAME.el
file, or is located in a subdirectory of the repo, you'll need to specify
`:files' in the `:recipe':
package! this-package
:recipe (:host github :repo "username/repo"
:files ("some-file.el" "src/lisp/*.el")))

If you'd like to disable a package included with Doom, you can do so here
with the `:disable' property:
package! builtin-package :disable t)

You can override the recipe of a built in package without having to specify
all the properties for `:recipe'. These will inherit the rest of its recipe
from Doom or MELPA/ELPA/Emacsmirror:
package! builtin-package :recipe (:nonrecursive t))
package! builtin-package-2 :recipe (:repo "myfork/package"))

Specify a `:branch' to install a package from a particular branch or tag.
This is required for some packages whose default branch isn't 'master' (which
our package manager can't deal with; see raxod502/straight.el#279)
package! builtin-package :recipe (:branch "develop"))

Use `:pin' to specify a particular commit to install.
package! builtin-package :pin "1a2b3c4d5e")


Doom's packages are pinned to a specific commit and updated from release to
release. The `unpin!' macro allows you to unpin single packages...
unpin! pinned-package)
...or multiple packages
unpin! pinned-package another-pinned-package)
...Or *all* packages (NOT RECOMMENDED; will likely break things)
(unpin! t)

#+begin_src elisp
(unpin! org-roam)
(package! org-roam-ui)
#+end_src

* init.el
:PROPERTIES:
:header-args: :tangle init.el
:END:
init.el -*- lexical-binding: t; -*-

This file controls what Doom modules are enabled and what order they load
in. Remember to run 'doom sync' after modifying it!

NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
documentation. There you'll find a link to Doom's Module Index where all
of our modules are listed, including what flags they support.

NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
'C-c c k' for non-vim users) to view its documentation. This works on
flags as well (those symbols that start with a plus).

Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
directory (for easy access to its source code).

** input and completion

- input
  chinese
  japanese
  layout            ; auie,ctsrnm is the superior home row
- completion
  helm              ; the *other* search engine for love and life
  ido               ; the other *other* search engine...
  ivy               ; a search engine for love and life

#+begin_src elisp
(doom! :input
       :completion
       company           ; the ultimate code completion backend
       vertico           ; the search engine of the future
#+end_src

** ui

deft              ; notational velocity for Emacs
hydra
indent-guides     ; highlighted indent columns
ligatures         ; ligatures and symbols to make your code pretty again
minimap           ; show a map of the code on the side
nav-flash         ; blink cursor line after big motions
neotree           ; a project drawer, like NERDTree for vim
tabs              ; a tab bar for Emacs
treemacs          ; a project drawer, like neotree but cooler
unicode           ; extended unicode support for various languages

zen               ; distraction-free coding or writing

#+begin_src elisp
:ui
doom              ; what makes DOOM look the way it does
doom-dashboard    ; a nifty splash screen for Emacs
doom-quit         ; DOOM quit-message prompts when you quit Emacs
hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
modeline          ; snazzy, Atom-inspired modeline, plus API
ophints           ; highlight the region an operation acts on
(popup +defaults)   ; tame sudden yet inevitable temporary windows
vc-gutter         ; vcs diff in the fringe
vi-tilde-fringe   ; fringe tildes to mark beyond EOB
workspaces        ; tab emulation, persistence & separate workspaces
window-select     ; visually switch windows
#+end_src

** editor

(evil +everywhere); come to the dark side, we have cookies\\
(format +onsave)  ; automated prettiness\\
god               ; run Emacs commands without modifier keys\\
lispy             ; vim for lisp, for people who don't like vim\\
multiple-cursors  ; editing in many places at once\\
objed             ; text object editing for the innocent\\
parinfer          ; turn lisp into python, sort of\\
rotate-text       ; cycle region at point between text candidates\\
word-wrap         ; soft wrapping with language-aware indent\\


#+begin_src elisp
:editor

file-templates    ; auto-snippets for empty files
fold              ; (nigh) universal code folding
snippets          ; my elves. They type so I don't have to

#+end_src

** emacs and term
- emacs
  ibuffer         ; interactive buffer management
- term
  eshell            ; the elisp shell that works everywhere
  shell             ; simple shell REPL for Emacs
  term              ; basic terminal emulator for Emacs
  vterm             ; the best terminal emulation in Emacs


#+begin_src elisp
:emacs
dired             ; making dired pretty [functional]
electric          ; smarter, keyword-based electric-indent
undo              ; persistent, smarter undo for your inevitable mistakes
vc                ; version-control and Emacs, sitting in a tree
:term
#+end_src

** checkers

#+begin_src elisp
:checkers
syntax              ; tasing you for every semicolon you forget
(spell +flyspell) ; tasing you for misspelling mispelling
grammar           ; tasing grammar mistake every you make
#+end_src

** tools
ansible

debugger          ; FIXME stepping through code, to help you add bugs
direnv
docker3
gist              ; interacting with github gists
lsp               ; M-x vscode
make              ; run make tasks from Emacs
pass              ; password manager for nerds
prodigy           ; FIXME managing external services & code builders
taskrunner        ; taskrunner for all your projects
terraform         ; infrastructure as code
tmux              ; an API for interacting with tmux
upload            ; map local to remote projects via ssh/ftp

#+begin_src elisp
:tools
(eval +overlay)     ; run code, run (also, repls)
lookup              ; navigate your code and its documentation
magit             ; a git porcelain for Emacs
biblio            ; Writes a PhD for you (citation needed)
pdf               ; pdf enhancements
rgb               ; creating color strings
editorconfig      ; let someone else argue about tabs vs spaces
ein               ; tame Jupyter notebooks with emacs
#+end_src

** os and lang

agda              ; types of types of types of types...\\
beancount         ; mind the GAAP\\
(cc +lsp)        ; C > C++ == 1\\
clojure           ; java with a lisp\\
common-lisp       ; if you've seen one lisp, you've seen them all\\
coq               ; proofs-as-programs\\
crystal           ; ruby at the speed of c\\
csharp            ; unity, .NET, and mono shenanigans\\
data              ; config/data formats\\
(dart +flutter)   ; paint ui and not much else\\
dhall\\
elixir            ; erlang done right\\
elm               ; care for a cup of TEA?\\
erlang            ; an elegant language for a more civilized age\\
ess               ; emacs speaks statistics\\
factor\\
faust             ; dsp, but you get to keep your soul\\
fsharp            ; ML stands for Microsoft's Language\\
fstar             ; (dependent) types and (monadic) effects and Z3\\
gdscript          ; the language you waited for\\
(go +lsp)         ; the hipster dialect\\
(haskell +lsp)    ; a language that's lazier than I am\\
hy                ; readability of scheme w/ speed of python\\
idris             ; a language you can depend on\\
json              ; At least it ain't XML\\
(java +lsp)       ; the poster child for carpal tunnel syndrome\\
javascript        ; all(hope(abandon(ye(who(enter(here))))))\\
julia             ; a better, faster MATLAB\\
kotlin            ; a better, slicker Java(Script)\\
latex             ; writing papers in Emacs has never been so fun\\
lean              ; for folks with too much to prove\\
ledger            ; be audit you can be\\
lua               ; one-based indices? one-based indices\\
nim               ; python + lisp at the speed of c\\
nix               ; I hereby declare "nix geht mehr!"\\
ocaml             ; an objective camel\\
php               ; perl's insecure younger brother\\
plantuml          ; diagrams for confusing people more\\
purescript        ; javascript, but functional\\
qt                ; the 'cutest' gui framework ever\\
racket            ; a DSL for DSLs\\
raku              ; the artist formerly known as perl6\\
rest              ; Emacs as a REST client\\
rst               ; ReST in peace\\
(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}\\
rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()\\
scala             ; java, but good\\
(scheme +guile)   ; a fully conniving family of lisps\\
sml\\
solidity          ; do you need a blockchain? No.\\
swift             ; who asked for emoji variables?\\
terra             ; Earth and Moon in alignment for performance.\\
web               ; the tubes\\
yaml              ; JSON, but readable\\
zig               ; C, but simpler\\

#+begin_src elisp
:os
(:if IS-MAC macos)  ; improve compatibility with macOS
tty               ; improve the terminal Emacs experience

:lang
emacs-lisp        ; drown in parentheses
fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
markdown          ; writing docs for people to ignore
org               ; organize your plain life in plain text
sh                ; she sells {ba,z,fi}sh shells on the C xor
python            ; beautiful is better than ugly
#+end_src

** email, app and config
- email

  notmuch
  (wanderlust +gmail)
- app
  calendar
  irc               ; how neckbeards socialize
  (rss +org)        ; emacs as an RSS reader
  twitter           ; twitter client https://twitter.com/vnought
- config
  literate

#+begin_src elisp
:email
(mu4e +org +gmail)

:app
calendar
emms
everywhere        ; *leave* Emacs!? You must be joking

:config
(default +bindings +smartparens))
#+end_src
